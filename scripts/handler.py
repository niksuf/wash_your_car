"""
Wash your car - —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≥–æ–¥—É (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
OpenWeather) –∏ –¥–∞–µ—Ç —Å–æ–≤–µ—Ç, —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ –ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É.

–ë–æ—Ç –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É:
https://t.me/worth_wash_car_bot

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
"""

import logging
import json
import requests
import emoji
from aiogram import Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import LabeledPrice, Message, PreCheckoutQuery
from aiogram.utils.markdown import hbold
from aiogram import F
import logger

import keyboards
from functions import read_yaml
from wash_functions import recommend_car_wash
import last_geo

HELP_MESSAGE = emoji.emojize(f"\n{hbold('–ú—ã—Ç—å –º–∞—à–∏–Ω—É?')} - —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ –∑–∞–ø—Ä–æ—Å—É "
                             "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≥–æ–¥—É (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenWeather) –∏ –¥–∞–µ—Ç —Å–æ–≤–µ—Ç, "
                             "—Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ –ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É.\n\n"
                             "/start - —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞;\n"
                             "/restart - —Ä–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞;\n"
                             "/help - –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–º–æ—â—å.")

logger.setup_logging()
conf = read_yaml('config.yml')
dp = Dispatcher()
lat = -999
lon = -999


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
    """
    print('Executing: command_start_handler')
    await message.answer(
        text=emoji.emojize(f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}!\n"
                           f"\n{hbold('–ú—ã—Ç—å –º–∞—à–∏–Ω—É?')} - —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ –∑–∞–ø—Ä–æ—Å—É "
                           "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≥–æ–¥—É (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenWeather) –∏ –¥–∞–µ—Ç —Å–æ–≤–µ—Ç, "
                           "—Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ –ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É.\n\n"
                           "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–∏–º–∏—Ç–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ :newspaper: –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é "
                           "–≥–µ–æ–ø–æ–∑–∏—Ü–∏—é :round_pushpin:"),
        parse_mode='HTML',
        reply_markup=keyboards.start_keyboard)


@dp.message(F.text.startswith('–î–∞–ª–µ–µ'))
async def agreement(message: Message) -> None:
    """
    –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–±–µ–∑–ª–∏—á–µ–Ω—ã)
    """
    print('Executing: agreement')
    await message.answer(
        text=emoji.emojize(f"{hbold('–ú—ã—Ç—å –º–∞—à–∏–Ω—É?')} –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞, "
                           "–≤ —Ç–æ–º —á–∏—Å–ª–µ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç, –∏—Å—Ç–æ—á–Ω–∏–∫–µ "
                           "—É—Å—Ç–∞–Ω–æ–≤–∫–∏, —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ "
                           "—Ü–µ–ª—è—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö "
                           "–∫–∞–º–ø–∞–Ω–∏–π, –∞ —Ç–∞–∫–∂–µ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫. –°–æ–±—Ä–∞–Ω–Ω–∞—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º "
                           "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å."),
        parse_mode='HTML',
        reply_markup=keyboards.accept_agreement_keyboard)


@dp.message(F.text.startswith('–ü—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ'))
async def work(message: Message) -> None:
    """
    –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
    """
    print('Executing: work')
    await message.answer(
        text=emoji.emojize("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é :round_pushpin:"),
        parse_mode='HTML',
        reply_markup=keyboards.send_position_keyboard)


@dp.message(Command(commands=['restart']))
async def command_restart_handler(message: Message) -> None:
    """
    –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
    """
    print('Executing: restart_bot')
    await message.answer(text="–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /start.")


@dp.message(F.text.startswith('–ü–æ–º–æ—â—å'))
async def show_help(message: Message) -> None:
    """
    –í—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–º–æ—â—å
    """
    await message.answer(text=HELP_MESSAGE)


@dp.message(Command(commands=['help']))
async def show_help(message: Message) -> None:
    """
    –í—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /help
    """
    await message.answer(text=HELP_MESSAGE)


@dp.message(F.location)
async def handle_location(message: types.Message) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
    """
    global lat
    lat = message.location.latitude
    global lon
    lon = message.location.longitude
    user_id = message.from_user.id
    user_username = message.from_user.username
    logging.info("user_id:%s;username:%s;latitude:%s;longitude:%s",
                 user_id,
                 user_username,
                 lat,
                 lon)

    conn, cur = last_geo.connect_to_db(conf['db']['database_name'],
                                      conf['db']['user_name'],
                                      conf['db']['user_password'],
                                      conf['db']['host'])
    if conn and cur:
        last_geo_status = last_geo.check_last_geo(cur, user_id)
        if last_geo_status:
            last_geo.update_last_geo(conn, cur, user_id, lat, lon)
        elif last_geo_status is False:
            last_geo.insert_last_geo(conn,
                                    cur,
                                    'NULL',
                                    user_id,
                                    user_username,
                                    lat,
                                    lon,
                                    'NULL')
        last_geo.close_connection_db(conn, cur)
    else:
        logging.info('Can not connect to database!')

    response = requests.get("https://api.openweathermap.org/data/2.5/"
                            f"forecast?lang=ru&lat={lat}&lon={lon}&"
                            f"appid={conf['open_weather_token']}",
                            timeout=10)
    weather_dict = json.loads(response.text)
    await message.answer(recommend_car_wash(weather_dict, lat, lon),
                         parse_mode='HTML',
                         reply_markup=keyboards.second_keyboard)


@dp.message()
async def use_old_location(message: types.Message) -> None:
    """
    –ò—Å–ø–æ–ª—å–∑—É—è –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ (–±–µ—Ä–µ—Ç—Å—è –∏–∑ –ë–î)
    """
    if '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é' in message.text:
        print('Executing: use_old_location')

        user_id = message.from_user.id
        conn, cur = last_geo.connect_to_db(conf['db']['database_name'],
                                      conf['db']['user_name'],
                                      conf['db']['user_password'],
                                      conf['db']['host'])
        if conn and cur:
            old_lat, old_lon = last_geo.get_last_geo(cur, user_id)
            last_geo.close_connection_db(conn, cur)
        else:
            logging.info('Can not connect to database!')

        print(f"latitude:  {old_lat}\nlongitude: {old_lon}")
        if old_lat and old_lon:
            response = requests.get("https://api.openweathermap.org/data/2.5/"
                                    f"forecast?lang=ru&lat={old_lat}&lon={old_lon}&"
                                    f"appid={conf['open_weather_token']}",
                                    timeout=10)
            weather_dict = json.loads(response.text)
            await message.answer(recommend_car_wash(weather_dict, old_lat, old_lon) + \
                                 f"\n\n–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: {weather_dict['city']['name']}",
                                 parse_mode='HTML',
                                 reply_markup=keyboards.second_keyboard)
        else:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏, "
                                 "–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é!",
                                parse_mode='HTML',
                                reply_markup=keyboards.second_keyboard)


@dp.message(F.text.startswith('–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º'))
async def handle_premium_purchase(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏
    """
    logger.info(f"User {message.from_user.id} initiated premium purchase")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if is_user_premium(message.from_user.id):
            await message.answer("üéâ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞!")
            return

        # –í—ã–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await send_invoice_handler(message)
        
    except Exception as e:
        logger.error(f"Error in premium purchase: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


async def send_invoice_handler(message: Message):
    prices = [LabeledPrice(label="–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞", amount=20)]    # 20 Stars
    await message.answer_invoice(
        title="–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞",
        description="–î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º –∑–∞ 20 Stars",
        provider_token="YOUR_PROVIDER_TOKEN",       # –ü–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ BotFather
        currency="XTR",     # –í–∞–ª—é—Ç–∞ Stars
        prices=prices,
        payload="premium_subscription",
        reply_markup=keyboards.payment_keyboard(),
    )


async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    await pre_checkout_query.answer(ok=True)


async def success_payment_handler(message: Message):
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø
    user_id = message.from_user.id
    activate_premium(user_id)
    
    await message.answer(
        text="üéâ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
             "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏!"
    )


def activate_premium(user_id: int):
    # –õ–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞ –≤ –ë–î
    pass
    # conn.execute('''
    #     INSERT OR REPLACE INTO users (user_id, is_premium, premium_until) 
    #     VALUES (?, 1, datetime('now', '+1 month'))
    # ''', (user_id,))
    # conn.commit()


def is_user_premium(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –ë–î
    # –ü—Ä–∏–º–µ—Ä:
    # cursor.execute('SELECT premium_until FROM users WHERE user_id = ?', (user_id,))
    # result = cursor.fetchone()
    # return result[0] > datetime.now() if result else False
    return False  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
